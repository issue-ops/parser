# Mega-Linter Configuration File
# https://megalinter.io/latest/config-file/

# Activates formatting and autofix
APPLY_FIXES: none

# Flag to clear files from report folder before starting the linting process
CLEAR_REPORT_FOLDER: true

DEFAULT_BRANCH: main

# List of disabled descriptors keys
# https://megalinter.io/latest/config-activation/
DISABLE:
  - COPYPASTE
  - JAVASCRIPT
  - SPELL

# List of disabled linters keys
# https://megalinter.io/latest/config-activation/
DISABLE_LINTERS:
  - MARKDOWN_MARKDOWN_TABLE_FORMATTER
  - REPOSITORY_KICS
  - REPOSITORY_TRIVY
  - TYPESCRIPT_STANDARD

# List of enabled but not blocking linters keys
# https://megalinter.io/latest/config-activation/
# DISABLE_ERRORS_LINTERS: []

# List of enabled descriptors keys
# https://megalinter.io/latest/config-activation/
# If you use ENABLE variable, all other linters will be disabled by default
# ENABLE: []

# List of enabled linters keys
# If you use ENABLE_LINTERS variable, all other linters will be disabled
# ENABLE_LINTERS: []

# List of excluded directory basenames.
EXCLUDED_DIRECTORIES:
  - .git
  - coverage
  - dist
  - megalinter-reports
  - node_modules
  - reports

# If set to true, MegaLinter fails if a linter or formatter has autofixed
# sources, even if there are no errors
FAIL_IF_UPDATED_SOURCES: false

# Upload reports to file.io
FILEIO_REPORTER: false

# Provides suggestions about different MegaLinter flavors to use to improve
# runtime performance
FLAVOR_SUGGESTIONS: true

# Formatter errors will be reported as errors (and not warnings) if this
# variable is set to false
FORMATTERS_DISABLE_ERRORS: false

# Posts a comment on the pull request with linting results
GITHUB_COMMENT_REPORTER: true

# Sets pull request status checks on GitHub
GITHUB_STATUS_REPORTER: true

# If set to true, MegaLinter will skip files containing @generated marker but
# without @not-generated marker (more info at https://generated.at)
IGNORE_GENERATED_FILES: true

# If set to true, MegaLinter will skip files ignored by git using .gitignore
IGNORE_GITIGNORED_FILES: true

# JavaScript default style to check/apply
JAVASCRIPT_DEFAULT_STYLE: prettier

# Directory for all linter configuration rules
# Can be a local folder or a remote URL
# (ex: https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules)
LINTER_RULES_PATH: .

# The file name for outputting logs. All output is sent to the log file
# regardless of LOG_LEVEL
LOG_FILE: linter.log

# How much output the script will generate to the console. One of INFO, DEBUG,
# WARNING or ERROR.
LOG_LEVEL: INFO

# Markdown default style to check/apply
MARKDOWN_DEFAULT_STYLE: markdownlint

MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE: __fixtures__

# Generate Markdown summary report
MARKDOWN_SUMMARY_REPORTER: true

# Name of the Markdown summary report file
MARKDOWN_SUMMARY_REPORTER_FILE_NAME: summary.md

# Process linters in parallel to improve overall MegaLinter performance. If
# true, linters of same language or formats are grouped in the same parallel
# process to avoid lock issues if fixing the same files
PARALLEL: true

# All available cores are used by default. If there are too many, you need to
# decrease the number of used cores in order to enhance performance
# PARALLEL_PROCESS_NUMBER: 4

# Directory for generating report files
# Set to none to not generate reports
REPORT_OUTPUT_FOLDER: linter

# Set to simple to avoid external images in generated markdown
REPORTERS_MARKDOWN_TYPE: advanced

# Additional list of secured environment variables to hide when calling linters.
# SECURED_ENV_VARIABLES: []

# Displays elapsed time in reports
SHOW_ELAPSED_TIME: true

# Displays all disabled linters mega-linter could have run
SHOW_SKIPPED_LINTERS: false

# Typescript default style to check/apply
TYPESCRIPT_DEFAULT_STYLE: prettier

# Will parse the entire repository and find all files to validate
# When set to false, only new or edited files will be parsed for validation
VALIDATE_ALL_CODEBASE: true

# Per-linter configuration
JAVASCRIPT_ES_CONFIG_FILE: .eslintrc.yml
JAVASCRIPT_PRETTIER_CONFIG_FILE: prettierrc.yml
JSON_PRETTIER_CONFIG_FILE: prettierrc.yml
MARKDOWN_MARKDOWNLINT_CONFIG_FILE: .markdownlint.yml
TYPESCRIPT_ES_CONFIG_FILE: .eslintrc.yml
TYPESCRIPT_PRETTIER_CONFIG_FILE: .prettierrc.yml
YAML_PRETTIER_CONFIG_FILE: .prettierrc.yml
YAML_YAMLLINT_CONFIG_FILE: .yaml-lint.yml
